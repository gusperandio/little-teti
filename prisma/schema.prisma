// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// yarn prisma migrate dev --name {name}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String        @id @default(uuid())
  name        String?
  email       String        @unique
  password    String
  phone       String?
  cpf         String?
  role        String?       @default("user")
  carts       Cart?         @relation(fields: [cartId], references: [id])
  purchases   Purchase[]
  stickers    Sticker[]     @relation("UserStickers")
  addresses   Address[]
  cartId      Int?
  userSticker UserSticker[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  @@map("users")
}

model Address {
  id         Int      @id @default(autoincrement())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  postalCode Int
  num        Int
  district   String
  complement String?
  city       String
  state      String
  principal  Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("address")
}

model Cart {
  id             Int           @id @default(autoincrement())
  amountProducts Int
  price          Float
  users          User[]
  products       CartProduct[]
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  @@map("cart")
}

model CartProduct {
  productId Int
  cartId    Int
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  cart      Cart    @relation(fields: [cartId], references: [id])

  @@id([productId, cartId])
  @@map("cartProduct")
}

model Purchase {
  id          Int               @id @default(autoincrement())
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  NFe         String
  totalPrice  Float
  sended      Boolean           @default(false)
  products    PurchaseProduct[]
  trackingNum String?
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt

  @@map("purchase")
}

model Sticker {
  id          String        @id @default(uuid())
  name        String
  imgUrl      String
  users       User[]        @relation("UserStickers")
  userSticker UserSticker[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  @@map("sticker")
}

model UserSticker {
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  stickerId String
  sticker   Sticker @relation(fields: [stickerId], references: [id])

  @@id([userId, stickerId])
  @@map("userSticker")
}

model Product {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  price       Float
  fakePrice   Float
  active      Boolean
  color       String
  girl        Boolean
  category    Category          @relation(fields: [categoryId], references: [id])
  categoryId  Int
  tags        Tags[]
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  sizes       ProductSize[]
  carts       CartProduct[]
  purchases   PurchaseProduct[]
  images      ProductImage[]

  @@map("product")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  imageUrl  String
  product   Product @relation(fields: [productId], references: [id])

  @@map("productImage")
}

model PurchaseProduct {
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  purchaseId Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int

  @@id([purchaseId, productId])
  @@map("purchaseProduct")
}

model ProductSize {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  sizeName  String
  amount    Int

  @@map("productSize")
}

model Tags {
  id         Int      @id @default(autoincrement())
  tagName    String
  Product    Product? @relation(fields: [productId], references: [id])
  productId  Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("tags")
}

model Category {
  id           Int       @id @default(autoincrement())
  categoryName String
  products     Product[]
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@map("category")
}

// INSERT INTO category ("categoryName", "updated_at")
// VALUES 
// ('Camiseta', current_timestamp),
// ('Calça', current_timestamp),
// ('Vestido', current_timestamp),
// ('Bermuda', current_timestamp),
// ('Macacão', current_timestamp),
// ('Conjunto', current_timestamp),
// ('Saia', current_timestamp),
// ('Casaco', current_timestamp),
// ('Jaqueta', current_timestamp),
// ('Blusa', current_timestamp),
// ('Roupa de Banho', current_timestamp),
// ('Roupa de Frio', current_timestamp),
// ('Roupa de Verão', current_timestamp),
// ('Uniforme Escolar', current_timestamp),
// ('Roupa Esportiva', current_timestamp),
// ('Pijama', current_timestamp),
// ('Fantasia', current_timestamp),
// ('Roupa de Bebê', current_timestamp),
// ('Recém-Nascido', current_timestamp),
// ('Sapato', current_timestamp),
// ('Acessório', current_timestamp),
// ('Meia', current_timestamp),
// ('Luva', current_timestamp),
// ('Chapéu', current_timestamp),
// ('Cinto', current_timestamp),
// ('Touca', current_timestamp),
// ('Lenço', current_timestamp),
// ('Moleton', current_timestamp),
// ('Calçado', current_timestamp),
// ('Roupa Íntima', current_timestamp);
